name: CI/CD using Docker Compose

on:
  push:
    branches:
      - main

env:
  EKS_CLUSTER: otel-demo-cluster
  REGION: us-east-1
  NAMESPACE: otel-demo-helm
  REPO_BASE: ghcr.io/${{ github.repository_owner }}/otel-demo
  COMPOSE_FILE: docker-compose.yml

jobs:
  build-push-patch:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Log in to GHCR
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build all images with Docker Compose
      run: docker compose -f $COMPOSE_FILE build

    - name: Tag and push each service to GHCR
      run: |
        SERVICES=$(docker compose -f $COMPOSE_FILE config --services)
        for SERVICE in $SERVICES; do
          LOCAL_IMAGE=$(docker compose -f $COMPOSE_FILE config | grep "image:" | grep "$SERVICE" | awk '{print $2}')
          GHCR_IMAGE="$REPO_BASE/$SERVICE:latest"
          echo "üì¶ Tagging $LOCAL_IMAGE ‚Üí $GHCR_IMAGE"
          docker tag $LOCAL_IMAGE $GHCR_IMAGE
          echo "üöÄ Pushing $GHCR_IMAGE"
          docker push $GHCR_IMAGE
        done

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $REGION
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Patch deployments in EKS with new GHCR images
      run: |
        for SERVICE in $(docker compose -f $COMPOSE_FILE config --services); do
          IMAGE="$REPO_BASE/$SERVICE:latest"
          echo "ü©π Patching $SERVICE with $IMAGE"
          kubectl patch deployment $SERVICE -n $NAMESPACE \
            --type='json' \
            -p="[{'op': 'replace', 'path': '/spec/template/spec/containers/0/image', 'value': '$IMAGE'}]" \
            || echo "‚ö†Ô∏è Failed to patch $SERVICE (may not exist)"
        done
