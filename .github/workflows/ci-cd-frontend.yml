name: CI/CD using Docker Compose and Helm

on:
  push:
    branches:
      - main

env:
  EKS_CLUSTER: otel-demo-cluster
  REGION: us-east-1
  NAMESPACE: otel-demo-ci-cd
  REPO_BASE: ghcr.io/${{ github.repository_owner }}/otel-demo
  COMPOSE_FILE: docker-compose.yml

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Log in to GHCR
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push images to GHCR
      run: |
        SERVICES=$(docker compose -f $COMPOSE_FILE config --services)

        for SERVICE in $SERVICES; do
          # Check if the service has a build section using docker-compose config
          HAS_BUILD=$(docker compose -f $COMPOSE_FILE config | awk "/^services:/,/^networks:/" | awk "/^  $SERVICE:/{flag=1;next}/^  [^ ]/{flag=0}flag && /build:/ {print \$1}" | wc -l)

          if [ "$HAS_BUILD" -eq 0 ]; then
            echo "Skipping $SERVICE â€” no build section (likely third-party or prebuilt)"
            continue
          fi

          echo "Building and pushing $SERVICE"
          docker compose -f $COMPOSE_FILE build $SERVICE
          docker tag $SERVICE $REPO_BASE/$SERVICE:latest
          docker push $REPO_BASE/$SERVICE:latest
        done

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $REGION
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Create namespace if not exists
      run: |
        kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE

    - name: Deploy using Helm
      run: |
        helm upgrade --install otel-ghcr ./helm-chart \
          --namespace $NAMESPACE \
          --create-namespace

    - name: Verify deployment
      run: kubectl get pods -n $NAMESPACE
