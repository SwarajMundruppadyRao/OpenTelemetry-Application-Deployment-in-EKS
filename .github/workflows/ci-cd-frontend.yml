name: CI/CD for OpenTelemetry Demo (frontend only)

on:
  push:
    branches:
      - main

env:
  EKS_CLUSTER: otel-demo-cluster
  REGION: us-east-1
  HELM_RELEASE: otel-demo
  NAMESPACE: otel-demo-helm
  REPO: ghcr.io/${{ github.repository_owner }}/otel-demo

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Log in to GHCR
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push frontend image
      run: |
        docker build -t $REPO/frontend:latest ./src/frontend
        docker push $REPO/frontend:latest

    - name: Debug IAM identity
      run: aws sts get-caller-identity

    - name: Update kubeconfig and set KUBECONFIG
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $REGION
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Validate cluster connectivity
      run: |
        kubectl get nodes
        helm version

    - name: Clean up existing frontend deployment and stuck pods
      run: |
        echo "Deleting existing frontend deployment (if any)..."
        kubectl delete deployment frontend -n $NAMESPACE || true

        echo "Force deleting non-running frontend pods..."
        kubectl get pods -n $NAMESPACE \
          --field-selector=status.phase!=Running,status.phase!=Succeeded \
          -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' \
          | grep '^frontend-' \
          | xargs -r -I{} kubectl delete pod {} -n $NAMESPACE --grace-period=0 --force || true

    - name: Deploy frontend via Helm
      run: |
        helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts || true
        helm repo update
        helm upgrade --install $HELM_RELEASE open-telemetry/opentelemetry-demo \
          --namespace $NAMESPACE --create-namespace

    - name: Patch frontend deployment to use GHCR image
      run: |
        kubectl patch deployment frontend -n $NAMESPACE \
          --type='json' \
          -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value": "'"$REPO/frontend:latest"'"}]'

    - name: Confirm frontend rollout
      run: |
        kubectl rollout status deployment/frontend -n $NAMESPACE

  rollback-if-fails:
    needs: deploy-frontend
    if: failure()
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Update kubeconfig and set KUBECONFIG
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $REGION
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Add Helm repo (context needed for rollback)
      run: |
        helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts || true
        helm repo update

    - name: Rollback frontend Helm release
      run: |
        echo "Checking Helm history for previous revision..."
        REV=$(helm history $HELM_RELEASE -n $NAMESPACE | awk 'NR==3{print $1}')
        echo "Rolling back to revision $REV"
        helm rollback $HELM_RELEASE $REV -n $NAMESPACE || echo "Rollback failed or no previous revision"
