name: CI/CD for All OpenTelemetry Services

on:
  push:
    branches:
      - main

env:
  EKS_CLUSTER: otel-demo-cluster
  REGION: us-east-1
  NAMESPACE: otel-demo-helm
  HELM_RELEASE: otel-demo
  REPO_BASE: ghcr.io/${{ github.repository_owner }}/otel-demo
  SERVICES: |
    accounting
    ad
    cart
    checkout
    currency
    email
    flagd
    flagd-ui
    fraud-detection
    frontend
    frontend-proxy
    grafana
    image-provider
    jaeger
    kafka
    load-generator
    opensearch
    otel-collector
    payment
    product-catalog
    prometheus
    quote
    recommendation
    shipping
    valkey-cart
    react-native-app

jobs:
  build-deploy-patch:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Login to GHCR
      run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Update kubeconfig and set KUBECONFIG
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $REGION
        echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Clean up failed or non-running service pods
      run: |
        echo "Cleaning non-running service pods..."
        kubectl get pods -n $NAMESPACE \
          --field-selector=status.phase!=Running,status.phase!=Succeeded \
          -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' \
          | grep -E '^('$(echo $SERVICES | tr ' ' '|')')-' \
          | xargs -r -I{} kubectl delete pod {} -n $NAMESPACE --grace-period=0 --force || true

    - name: Loop through services Build, push, patch
      run: |
        for SERVICE in $SERVICES; do
          echo "ðŸ”§ Processing $SERVICE"

          IMAGE="$REPO_BASE/$SERVICE:latest"
          SRC_DIR="./src/$SERVICE"

          if [ ! -f "$SRC_DIR/Dockerfile" ]; then
            echo " Skipping $SERVICE Dockerfile not found in $SRC_DIR"
            continue
          fi

          echo "Building $IMAGE..."
          docker build -t $IMAGE $SRC_DIR

          echo " Pushing $IMAGE..."
          docker push $IMAGE

          echo " Patching deployment for $SERVICE..."
          kubectl patch deployment $SERVICE -n $NAMESPACE \
            --type='json' \
            -p="[{'op': 'replace', 'path': '/spec/template/spec/containers/0/image', 'value': '$IMAGE'}]" \
            || echo "Deployment $SERVICE not found or patch failed"
        done
